HOW TO USE THE BUOY SCRIPTS AND THE PLOT DATA.

# ==============================================================================
#                                   SCRIPT SUMMARY
# ==============================================================================

# This script processes wave data from WW3 (WaveWatch III) model output and 
# compares it with observational buoy data.

# ==============================================================================
# Task                     | Description
# -------------------------|----------------------------------------------------
# 1. Imports and Setup     | - Imports necessary libraries
#                          | - Suppresses warnings for cleaner output
# -------------------------|----------------------------------------------------
# 2. Unzip and Untar       | - Defines function `unzip_and_untar`
#                          | - Extracts contents from gzipped tar files
# -------------------------|----------------------------------------------------
# 3. Main Script Execution | - Executes based on command line arguments
#                          | - Handles `spec.gz` mode
# -------------------------|----------------------------------------------------
# 4. Process Extracted Files| - Reads and processes extracted files
#                          | - Extracts wave parameters
# -------------------------|----------------------------------------------------
# 5. Model and Buoy Data   | - Supports various model output formats
#                          | - Performs quality checks and stores results
# -------------------------|----------------------------------------------------
# 6. Reading Buoy Data     | - Reads buoy data from netCDF files
#                          | - Performs quality checks and extracts parameters
# -------------------------|----------------------------------------------------
# 7. Combining Data        | - Aligns model and buoy data
#                          | - Ensures data validity
# -------------------------|----------------------------------------------------
# 8. Grid and Cyclone Info | - Incorporates grid and cyclone data if provided
#                          | - Includes latitude, longitude, depth, and coast distance
# -------------------------|----------------------------------------------------
# 9. Forecast Data Handling| - Reshapes and allocates forecast data
#                          | - Creates unique time dimension for cycles
# -------------------------|----------------------------------------------------
# 10. Saving to netCDF     | - Saves combined data to netCDF file
#                          | - Adds metadata and handles time units
# -------------------------|----------------------------------------------------
# 11. Cleanup              | - Deletes temporary files and directories
# ==============================================================================
# Overall, the script automates the extraction, processing, comparison, and 
# storage of wave model data with observational buoy data, ensuring data 
# integrity through quality checks and handling various input formats.

# Execute the Python script with the provided arguments
python3 your_python_script.py "$@"
Using WaveWatch III tools, this script is modelBuoycollocation.py.
python3 modelBuoycollocation.py "$@"
There are two submit job script formats shared (script-spec.sh, script-bull.sh) in the hr-eval branch, that user can use the. User should change the pathes or the model names or other variables which are defined in those scripts. For more detailed
information user can checkout the modelBupycollocation.py code. There is a good instruction at the top of the code which explains more. 

You can find a sample for running this code in this path: /scratch2/NCEPDEV/marine/Ghazal.Mohammadpour/Buoyval-multi1/Buoy_branch/WW3-tools/ww3tools

In this path you can find a scripts called jobcard-summer.sh , jobcard-hurricane.sh and jobcard-winter.sh , these scripts are automated format for submitting many jobs at the same time. These codes helps 
with submitting jobs for each initial condition. One can merge them all. These scripts are same as script-spec.sh, but it can submit all jobs for any intial conditions we define at the same time. The reason 
for doing this is that, for some models, running modelBuoycollocation.py takes time (more than 8 hours allowance time) and I foud this way more efficient way for submitting the jobs. 
So, when you submit the job to process many intial conditions, it may break because of the limitted time. But this way garanties for a completing the process at least for the models I have worked with.  

# After generating the netCDF file, validate buoy data using statistics and 
# plotting with `compare-all-buoy-sh.py`. The output format is:
# WW3.{model_name}{season}Buoy_{start date}to{stop_date}.nc

# ==============================================================================
#                   USING THE compare-all-buoy-sh.py CODE
# ==============================================================================

# This script processes and analyzes oceanographic model data from multiple 
# models, comparing them to observed data from buoys.

# Configuration File (configuration4.json)
# The script requires a configuration file in JSON format, specifying various 
# settings and paths for models and data directories.

# ==============================================================================
# Setting                | Description
# -----------------------|------------------------------------------------------
# process_buoys_separately | Processes buoys separately if true
# calculate_combined_statistics | Calculates combined statistics if true
# models                 | Paths to model data directories
# forecast_ranges        | Ranges for forecasting
# plot_combined_taylor   | Creates combined Taylor diagrams if true
# directory_path         | Output directory for results
# ==============================================================================

# Code Overview
# - Load Configuration: Reads configuration file for settings
# - Get Common Buoy IDs: Identifies common buoy IDs across models
# - Process Model Data: Extracts and compares wave height (HS) and wind speed
# - Plotting: Generates scatter plots and optional Taylor diagrams
# - Statistics Calculation: Calculates and saves statistical metrics

# ==============================================================================
# Running the Script
# ==============================================================================
# - Prepare the Configuration File: Ensure the JSON file is properly set up
# - Execute the Script: Run in Python environment with necessary libraries
# - View Output: Generated plots and statistical files saved in output directory

# ==============================================================================
# Key Functions            | Description
# -------------------------|----------------------------------------------------
# get_common_buoy_ids      | Identifies common buoy IDs across models
# process_model_data       | Processes data for forecast ranges, generates plots
# create_combined_taylor_plot | Creates Taylor diagrams for combined comparisons
# ==============================================================================

# Sample Usage
# - Ensure necessary dependencies are installed.
# - Place configuration file in the same directory as the script.
# - Run the script:
python compare-all-buoy-sh.py
(The code name can be changed by the user if necessary)
I dont share any script for submitting this script as its a simple format. I just provide a sample here: 



#!/bin/sh --login
#SBATCH --nodes=1
#SBATCH --ntasks-per-node=1
#SBATCH --time=00:30:00
#SBATCH --partition=hera
#SBATCH --account=marine-cpu
#SBATCH --job-name=process_data
#SBATCH --output=logfile.out

# Load necessary modules
module use /scratch1/NCEPDEV/climate/Jessica.Meixner/general/modulefiles-rocky16
module load ww3tools

python3 compare-all-buoy-sh.py (You may change the name to other names, be carefull to change it here as well when you want to submit the job script)



# - Check the output directory for generated plots and statistical files.

You have to define the pathes for the modelBuoycollocation.py outpus in the configuration files needed for compare-all-buoy-sh.py and then run the 
code to make the plots. 
I shared path if you want to have sample: /scratch2/NCEPDEV/marine/Ghazal.Mohammadpour/Buoyval-multi1/Buoy_branch/WW3-tools/ww3tools

in the above path you can run the code. You have to modify the configuration file to include any models you want. For the buoy validation HR3a,b is 
not working properly. (Jessica is taking care of that)thats why I only did that for the HR2,HR1,MULTI1,GFSV16, I also did this for HR3a,b separetly,
 which does not give a good results. 
